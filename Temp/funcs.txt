
/// @brief Retrieves all children of the symbol.
/// @param symbol The symbol of which to get the children.
/// @return An enumeration of the children symbols.
static const SymbolEnum findChildren(const Symbol& symbol);

/// @brief Retrieves the children of the symbol. This method is the extended
/// version of findChildren.
/// @param symbol The symbol of which to get the children.
/// @return An enumeration of the children symbols.
static const SymbolEnum findChildrenEx(const Symbol& symbol);

/// @brief Retrieves the children of the symbol that are valid at a
/// specified address.
/// @param symbol The symbol of which to get the children.
/// @param address The address to filter the children.
/// @return An enumeration of the children symbols.
static const SymbolEnum findChildrenExByAddr(const Symbol& symbol,
                                             const Address& address);

/// @brief Retrieves the children of the symbol that are valid at a
/// specified relative virtual address (RVA).
/// @param symbol The symbol of which to get the children.
/// @param rva The relative virtual address to filter the children.
/// @return An enumeration of the children symbols.
static const SymbolEnum findChildrenExByRVA(const Symbol& symbol,
                                            const RVA& rva);

/// @brief Retrieves the children of the symbol that are valid at a
/// specified virtual address (VA).
/// @param symbol The symbol of which to get the children.
/// @param va The virtual address to filter the children.
/// @return An enumeration of the children symbols.
static const SymbolEnum findChildrenExByVA(const Symbol& symbol, const VA& va);

/// @brief Retrieves an enumeration that allows a client to iterate through
/// all of the inline frames on a given address.
/// @param symbol The symbol of which to get the inline frames.
/// @param address The address to filter the inline frames.
/// @return An enumeration of the inline frames.
static const FrameEnum findInlineFramesByAddr(const Symbol& symbol,
                                              const Address& address);

/// @brief Retrieves an enumeration that allows a client to iterate through
/// all of the inline frames on a specified relative virtual address (RVA).
/// @param symbol The symbol of which to get the inline frames.
/// @param rva The relative virtual address to filter the inline frames.
/// @return An enumeration of the inline frames.
static const FrameEnum findInlineFramesByRVA(const Symbol& symbol,
                                             const RVA& rva);

/// @brief Retrieves an enumeration that allows a client to iterate through
/// all of the inline frames on a specified virtual address (VA).
/// @param symbol The symbol of which to get the inline frames.
/// @param va The virtual address to filter the inline frames.
/// @return An enumeration of the inline frames.
static const FrameEnum findInlineFramesByVA(const Symbol& symbol, const VA& va);

/// @brief Retrieves an enumeration that allows a client to iterate through
/// the line number information of all functions that are inlined, directly
/// or indirectly, in this symbol.
/// @param symbol The symbol of which to get the inlinee lines.
/// @return An enumeration of the inlinee lines.
static const LineEnum findInlineeLines(const Symbol& symbol);

/// @brief Retrieves an enumeration that allows a client to iterate through
/// the line number information of all functions that are inlined, directly
/// or indirectly, in this symbol within the specified address range.
/// @param symbol The symbol of which to get the inlinee lines.
/// @param address The address range to filter the inlinee lines.
/// @return An enumeration of the inlinee lines.
static const LineEnum findInlineeLinesByAddr(const Symbol& symbol,
                                             const Address& address);

/// @brief Retrieves an enumeration that allows a client to iterate through
/// the line number information of all functions that are inlined, directly
/// or indirectly, in this symbol within the specified relative virtual
/// address (RVA).
/// @param symbol The symbol of which to get the inlinee lines.
/// @param rva The relative virtual address to filter the inlinee lines.
/// @return An enumeration of the inlinee lines.
static const LineEnum findInlineeLinesByRVA(const Symbol& symbol,
                                            const RVA& rva);

/// @brief Retrieves an enumeration that allows a client to iterate through
/// the line number information of all functions that are inlined, directly
/// or indirectly, in this symbol within the specified virtual address (VA).
/// @param symbol The symbol of which to get the inlinee lines.
/// @param va The virtual address to filter the inlinee lines.
/// @return An enumeration of the inlinee lines.
static const LineEnum findInlineeLinesByVA(const Symbol& symbol, const VA& va);

/// @brief Retrieves the .NET Native input assembly file that is the parent
/// of the symbol.
/// @param symbol The symbol of which to get the input assembly file.
/// @return The input assembly file.
static const AssemblyFile findInputAssemblyFile(const Symbol& symbol);

/// @brief Given a corresponding tag value, this method returns an
/// enumeration of symbols that are contained in this stub function at a
/// specified relative virtual address.
/// @param symbol The symbol of which to get the symbols.
/// @param rva The relative virtual address to filter the symbols.
/// @param tag The tag value to filter the symbols.
/// @return An enumeration of the symbols.
static const SymbolEnum
findSymbolsByRVAForAcceleratorPointerTag(const Symbol& symbol, const RVA& rva,
                                         const Tag& tag);

/// @brief Returns the number of accelerator pointer tags in a C++ AMP stub
/// function.
/// @param symbol The symbol of which to get the accelerator pointer tags.
/// @return The number of accelerator pointer tags.
static const int findSymbolsForAcceleratorPointerTag(const Symbol& symbol);

/// @brief Returns all accelerator pointer tag values that correspond to a
/// C++ AMP accelerator stub function.
/// @param symbol The symbol of which to get the accelerator pointer tags.
/// @return An array of accelerator pointer tag values.
static const TagArray getAcceleratorPointerTags(const Symbol& symbol);

/// @brief Retrieves the access modifier of a class member.
/// @param symbol The symbol of which to get the access modifier.
/// @return The access modifier.
static const AccessModifier getAccess(const Symbol& symbol);

/// @brief Retrieves the offset part of an address location. Use when the
/// LocationType Enumeration is set to LocIsStatic.
/// @param symbol
/// @return The offset part of an address location.
/// @note For static members located in an external DLL, the offset returned
/// by this method may be 0 as this method relies on obtaining the virtual
/// address of the member. Virtual addresses are valid only if the
/// IDiaSession::put_loadAddress method in the IDiaSession interface has
/// been called with a nonzero parameter specifying the load address of the
/// DLL. To get the section part of an address, call the
/// IDiaSymbol::get_addressSection method.
static DWORD getAddressOffset(const Symbol& symbol);

/// @brief Retrieves the section part of an address location. Use when the
/// LocationType Enumeration is set to LocIsStatic.
/// @param symbol
/// @return The section part of an address location.
/// @note For static members located in an external DLL, the section
/// returned by this method may be 0 as this method relies on obtaining the
/// virtual address of the member. Virtual addresses are valid only if the
/// IDiaSession::put_loadAddress method in the IDiaSession interface has
/// been called with a nonzero parameter specifying the load address of the
/// DLL. To get the offset part of an address, call the
/// IDiaSymbol::get_addressOffset method.
static DWORD getAddressSection(const Symbol& symbol);

/// @brief Retrieves whether the symbol's address is taken.
/// @param symbol The symbol of which to get the address-taken status.
/// @return True if the symbol's address is taken, otherwise false.
static const BOOL getAddressTaken(const Symbol& symbol);

/// @brief Retrieves the age of the symbol.
/// @param symbol The symbol of which to get the age.
/// @return The age.
static const DWORD getAge(const Symbol& symbol);

/// @brief Retrieves the array index type ID of the symbol.
/// @param symbol The symbol of which to get the array index type ID.
/// @return The array index type ID.
static const DWORD getArrayIndexTypeId(const Symbol& symbol);

/// @brief Retrieves the base symbol of the current symbol.
/// @param symbol The symbol of which to get the base symbol.
/// @return The base symbol.
static const Symbol getBaseSymbol(const Symbol& symbol);

/// @brief Retrieves the base symbol ID of the current symbol.
/// @param symbol The symbol of which to get the base symbol ID.
/// @return The base symbol ID.
static const DWORD getBaseSymbolId(const Symbol& symbol);

/// @brief Retrieves the bit field of the current symbol.
/// @param symbol The symbol of which to get the bit field.
/// @return The bit field.
static const DWORD getBitField(const Symbol& symbol);

/// @brief Retrieves the binding space.
/// @param symbol The symbol of which to get the binding space.
/// @return The binding space.
static const DWORD getBindSpace(const Symbol& symbol);

/// @brief Retrieves the bit position of the current symbol.
/// @param symbol The symbol of which to get the bit position.
/// @return The bit position.
static const DWORD getBitPosition(const Symbol& symbol);

/// @brief Retrieves the bit size of the current symbol.
/// @param symbol The symbol of which to get the bit size.
/// @return The bit size.
static const DWORD getBitSize(const Symbol& symbol);

/// @brief Retrieves a built-in kind of the HLSL type.
/// @param symbol The symbol of which to get the built-in kind.
/// @return The built-in kind.
static const DWORD getBuiltInKind(const Symbol& symbol);

/// @brief Returns an indicator of a method's calling convention.
/// @param symbol The symbol of which to get the calling convention.
/// @return The calling convention.
static const DWORD getCallingConvention(const Symbol& symbol);

/// @brief Retrieves the characteristics of this COFF section.
/// @param symbol The symbol of which to get the characteristics.
/// @return The characteristics.
static const DWORD getCharacteristics(const Symbol& symbol);

/// @brief Retrieves a reference to the class parent of the symbol.
/// @param symbol
/// @return An IDiaSymbol object that represents the class parent of the
/// symbol.
static IDiaSymbol* getClassParent(const Symbol& symbol);

/// @brief Retrieves whether the symbol represents code.
/// @param symbol The symbol of which to get the code status.
/// @return True if the symbol represents code, otherwise false.
static const BOOL getCode(const Symbol& symbol);

/// @brief Retrieves the COFF group symbol this symbol comes from.
/// @param symbol The symbol of which to get the COFF group.
/// @return The COFF group symbol.
static const Symbol getCoffGroup(const Symbol& symbol);

/// @brief Retrieves whether the symbol is compiler-generated.
/// @param symbol The symbol of which to get the compiler-generated status.
/// @return True if the symbol is compiler-generated, otherwise false.
static const BOOL getCompilerGenerated(const Symbol& symbol);

/// @brief Retrieves whether the symbol is a constant export.
/// @param symbol The symbol of which to get the constant export status.
/// @return True if the symbol is a constant export, otherwise false.
static const BOOL getConstantExport(const Symbol& symbol);

/// @brief Retrieves whether the symbol is a data export.
/// @param symbol The symbol of which to get the data export status.
/// @return True if the symbol is a data export, otherwise false.
static const BOOL getDataExport(const Symbol& symbol);

/// @brief Retrieves the variable classification of a data symbol.
/// @param symbol
/// @return A value from the DataKind Enumeration enumeration specifying the
/// kind of data such as global, static, or constant, for example.
static enum DataKind getDataKind(const Symbol& symbol);

/// @brief Retrieves the exception handler address offset of the symbol.
/// @param symbol The symbol of which to get the exception handler address
/// offset.
/// @return The exception handler address offset.
static const DWORD getExceptionHandlerAddressOffset(const Symbol& symbol);

/// @brief Retrieves the exception handler address section of the symbol.
/// @param symbol The symbol of which to get the exception handler address
/// section.
/// @return The exception handler address section.
static const DWORD getExceptionHandlerAddressSection(const Symbol& symbol);

/// @brief Retrieves the exception handler relative virtual address of the
/// symbol.
/// @param symbol The symbol of which to get the exception handler relative
/// virtual address.
/// @return The exception handler relative virtual address.
static const DWORD
getExceptionHandlerRelativeVirtualAddress(const Symbol& symbol);

/// @brief Retrieves the exception handler virtual address of the symbol.
/// @param symbol The symbol of which to get the exception handler virtual
/// address.
/// @return The exception handler virtual address.
static const ULONGLONG getExceptionHandlerVirtualAddress(const Symbol& symbol);

/// @brief Retrieves whether the symbol's export has an explicitly assigned
/// ordinal.
/// @param symbol The symbol of which to get the explicitly assigned ordinal
/// status.
/// @return True if the symbol's export has an explicitly assigned ordinal,
/// otherwise false.
static const BOOL getExportHasExplicitlyAssignedOrdinal(const Symbol& symbol);

/// @brief Retrieves whether the symbol's export is a forwarder.
/// @param symbol The symbol of which to get the forwarder status.
/// @return True if the symbol's export is a forwarder, otherwise false.
static const BOOL getExportIsForwarder(const Symbol& symbol);

/// @brief Retrieves the final live static size of the symbol.
/// @param symbol The symbol of which to get the final live static size.
/// @return The final live static size.
static const DWORD getFinalLiveStaticSize(const Symbol& symbol);

/// @brief Retrieves the frame size of the symbol.
/// @param symbol The symbol of which to get the frame size.
/// @return The frame size.
static const DWORD getFrameSize(const Symbol& symbol);

/// @brief Retrieves whether the symbol represents a function.
/// @param symbol The symbol of which to get the function status.
/// @return True if the symbol represents a function, otherwise false.
static const BOOL getFunction(const Symbol& symbol);

/// @brief Retrieves whether the symbol has a control flow check.
/// @param symbol The symbol of which to get the control flow check status.
/// @return True if the symbol has a control flow check, otherwise false.
static const BOOL getHasControlFlowCheck(const Symbol& symbol);

/// @brief Retrieves whether the symbol has valid PGO counts.
/// @param symbol The symbol of which to get the valid PGO counts status.
/// @return True if the symbol has valid PGO counts, otherwise false.
static const BOOL getHasValidPGOCounts(const Symbol& symbol);

/// @brief Retrieves whether the symbol is optimized for speed.
/// @param symbol The symbol of which to get the optimized for speed status.
/// @return True if the symbol is optimized for speed, otherwise false.
static const BOOL getIsOptimizedForSpeed(const Symbol& symbol);

/// @brief Retrieves whether the symbol is PGO.
/// @param symbol The symbol of which to get the PGO status.
/// @return True if the symbol is PGO, otherwise false.
static const BOOL getIsPGO(const Symbol& symbol);

/// @brief Retrieves the number of bits or bytes of memory used by the
/// object represented by this symbol.
/// @param symbol
/// @return The number of bytes or bits of memory used by the object
/// represented by this symbol.
/// @note If the LocationType Enumeration of the symbol is LocIsBitField,
/// the length returned by this method is in bits; otherwise, the length is
/// in bytes for all other location types.
static ULONGLONG getLength(const Symbol& symbol);

/// @brief Retrieves a reference to the lexical parent of the symbol.
/// @param symbol
/// @return An IDiaSymbol object that represents the lexical parent of the
/// symbol.
static IDiaSymbol* getLexicalParent(const Symbol& symbol);

/// @brief Retrieves the location type of a data symbol.
/// @param symbol
/// @return A value from the LocationType Enumeration enumeration that
/// specifies the location type of a data symbol, such as static or local.
static enum LocationType getLocationType(const Symbol& symbol);

/// @brief Retrieves the lower bound of the symbol.
/// @param symbol The symbol of which to get the lower bound.
/// @return The lower bound symbol.
static const Symbol getLowerBound(const Symbol& symbol);

/// @brief Retrieves the lower bound ID of the symbol.
/// @param symbol The symbol of which to get the lower bound ID.
/// @return The lower bound ID.
static const DWORD getLowerBoundId(const Symbol& symbol);

/// @brief Retrieves whether the symbol is managed.
/// @param symbol The symbol of which to get the managed status.
/// @return True if the symbol is managed, otherwise false.
static const BOOL getManaged(const Symbol& symbol);

/// @brief Retrieves whether the symbol is MSIL.
/// @param symbol The symbol of which to get the MSIL status.
/// @return True if the symbol is MSIL, otherwise false.
static const BOOL getMsil(const Symbol& symbol);

/// @brief Retrieves the name of the symbol.
/// @param symbol The symbol of which to get the name of.
/// @return The name of the symbol.
static const BstrWrapper getName(const Symbol& symbol);

/// @brief Retrieves whether the symbol has no name export.
/// @param symbol The symbol of which to get the no name export status.
/// @return True if the symbol has no name export, otherwise false.
static const BOOL getNoNameExport(const Symbol& symbol);

/// @brief Retrieves the offset of the symbol location. Use when the
/// LocationType Enumeration is LocIsRegRel or LocIsBitField.
/// @param symbol
/// @return The offset in bytes of the symbol location.
static LONG getOffset(const Symbol& symbol);

/// @brief Retrieves the ordinal of the symbol.
/// @param symbol The symbol of which to get the ordinal.
/// @return The ordinal.
static const DWORD getOrdinal(const Symbol& symbol);

/// @brief Retrieves the PGO dynamic instruction count of the symbol.
/// @param symbol The symbol of which to get the PGO dynamic instruction
/// count.
/// @return The PGO dynamic instruction count.
static const ULONGLONG getPGODynamicInstructionCount(const Symbol& symbol);

/// @brief Retrieves the PGO edge count of the symbol.
/// @param symbol The symbol of which to get the PGO edge count.
/// @return The PGO edge count.
static const DWORD getPGOEdgeCount(const Symbol& symbol);

/// @brief Retrieves the PGO entry count of the symbol.
/// @param symbol The symbol of which to get the PGO entry count.
/// @return The PGO entry count.
static const DWORD getPGOEntryCount(const Symbol& symbol);

/// @brief Retrieves the phase name of the symbol.
/// @param symbol The symbol of which to get the phase name.
/// @return The phase name.
static const BstrWrapper getPhaseName(const Symbol& symbol);

/// @brief Retrieves whether the symbol is a private export.
/// @param symbol The symbol of which to get the private export status.
/// @return True if the symbol is a private export, otherwise false.
static const BOOL getPrivateExport(const Symbol& symbol);

/// @brief Retrieves the rank of the symbol.
/// @param symbol The symbol of which to get the rank.
/// @return The rank.
static const DWORD getRank(const Symbol& symbol);

/// @brief Retrieves the register designator of the location when the
/// LocationType Enumeration is set to LocIsEnregistered.
/// @param symbol
/// @return The register designator of the location.
/// @note If the symbol is relative to a register, that is, if the symbol's
/// LocationType Enumeration is set to LocIsRegRel, use the get_registerId
/// method followed by a call to the IDiaSymbol::get_offset method to get
/// the offset from the register where the symbol is located.
static DWORD getRegisterId(const Symbol& symbol);

/// @brief Retrieves the relative virtual address (RVA) of the location. Use
/// when the LocationType Enumeration is set to LocIsStatic.
/// @param symbol
/// @return The relative virtual address of the location.
static DWORD getRelativeVirtualAddress(const Symbol& symbol);

/// @brief Retrieves the signature of the symbol.
/// @param symbol The symbol of which to get the signature.
/// @return The signature.
static const DWORD getSignature(const Symbol& symbol);

/// @brief Retrieves the static size of the symbol.
/// @param symbol The symbol of which to get the static size.
/// @return The static size.
static const DWORD getStaticSize(const Symbol& symbol);

/// @brief Retrieves the unique symbol identifier.
/// @param symbol The symbol of which to get the UID of.
/// @return The symbol ID of the symbol.
static DWORD getSymIndexId(const Symbol& symbol);

/// @brief Retrieves the symbol type classifier.
/// @param symbol The symbol of which to get the SymTag of.
/// @return A value from the SymTagEnum Enumeration enumeration that
/// specifies the symbol type classifier.
static enum SymTagEnum getSymTag(const Symbol& symbol);

/// @brief Retrieves the symbol that represents the type for this symbol.
/// @param symbol
/// @return An IDiaSymbol object that represents the type of this symbol.
/// @note  that it is possible for a symbol to not have a type. For example,
/// the name of a structure has no type but it might have children symbols
/// (use the IDiaSymbol::findChildren method to examine those children).
static IDiaSymbol* getType(const Symbol& symbol);

/// @brief Retrieves the type ID of the symbol.
/// @param symbol The symbol of which to get the type ID.
/// @return The type ID.
static const DWORD getTypeId(const Symbol& symbol);

/// @brief Retrieves the undecorated name of the symbol.
/// @param symbol The symbol of which to get the undecorated name.
/// @return The undecorated name.
static const BstrWrapper getUndecoratedName(const Symbol& symbol);

/// @brief Retrieves the upper bound of the symbol.
/// @param symbol The symbol of which to get the upper bound.
/// @return The upper bound symbol.
static const Symbol getUpperBound(const Symbol& symbol);

/// @brief Retrieves the upper bound ID of the symbol.
/// @param symbol The symbol of which to get the upper bound ID.
/// @return The upper bound ID.
static const DWORD getUpperBoundId(const Symbol& symbol);

/// @brief Retrieves the virtual address (VA) of the location. Use when the
/// LocationType Enumeration is set to LocIsStatic.
/// @param symbol
/// @return The virtual address of the location.
static ULONGLONG getVirtualAddress(const Symbol& symbol);

/// @brief Retrieves the virtual base displacement index of the symbol.
/// @param symbol The symbol of which to get the virtual base displacement
/// index.
/// @return The virtual base displacement index.
static const DWORD getVirtualBaseDispIndex(const Symbol& symbol);

/// @brief Retrieves the virtual table shape ID of the symbol.
/// @param symbol The symbol of which to get the virtual table shape ID.
/// @return The virtual table shape ID.
static const DWORD getVirtualTableShapeId(const Symbol& symbol);

/// @brief Retrieves the source file and line number that indicate where a
/// specified user-defined type is defined.
/// @param symbol The symbol of which to get the source line on type definition.
/// @return The source line on type definition.
static const LineNumber getSrcLineOnTypeDefn(const Symbol& symbol);

/// @brief Retrieves a flag that specifies whether a pointer type is an rvalue
/// reference.
/// @param symbol The symbol of which to get the rvalue reference status.
/// @return True if the pointer is an rvalue reference, otherwise false.
static const BOOL getRValueReference(const Symbol& symbol);

/// @brief Retrieves the back end build number of the compiler.
/// @param symbol The symbol of which to get the back end build number.
/// @return The back end build number.
static const DWORD getBackEndBuild(const Symbol& symbol);

/// @brief Retrieves the back end major version number of the compiler.
/// @param symbol The symbol of which to get the back end major version number.
/// @return The back end major version number.
static const DWORD getBackEndMajor(const Symbol& symbol);

/// @brief Retrieves the back end minor version number of the compiler.
/// @param symbol The symbol of which to get the back end minor version number.
/// @return The back end minor version number.
static const DWORD getBackEndMinor(const Symbol& symbol);

/// @brief Retrieves the back end QFE number of the compiler.
/// @param symbol The symbol of which to get the back end QFE number.
/// @return The back end QFE number.
static const DWORD getBackEndQFE(const Symbol& symbol);

/// @brief Retrieves the base data offset of the symbol.
/// @param symbol The symbol of which to get the base data offset.
/// @return The base data offset.
static const DWORD getBaseDataOffset(const Symbol& symbol);

/// @brief Retrieves the base data slot of the symbol.
/// @param symbol The symbol of which to get the base data slot.
/// @return The base data slot.
static const DWORD getBaseDataSlot(const Symbol& symbol);

/// @brief Retrieves the base type of the symbol.
/// @param symbol The symbol of which to get the base type.
/// @return The base type.
static const Symbol getBaseType(const Symbol& symbol);

/// @brief Retrieves the binding ID of the symbol.
/// @param symbol The symbol of which to get the binding ID.
/// @return The binding ID.
static const DWORD getBindID(const Symbol& symbol);

/// @brief Retrieves the binding slot of the symbol.
/// @param symbol The symbol of which to get the binding slot.
/// @return The binding slot.
static const DWORD getBindSlot(const Symbol& symbol);

/// @brief Retrieves the class parent ID of the symbol.
/// @param symbol The symbol of which to get the class parent ID.
/// @return The class parent ID.
static const DWORD getClassParentId(const Symbol& symbol);

/// @brief Retrieves the compiler name of the symbol.
/// @param symbol The symbol of which to get the compiler name.
/// @return The compiler name.
static const BstrWrapper getCompilerName(const Symbol& symbol);

/// @brief Retrieves the constant type of the symbol.
/// @param symbol The symbol of which to get the constant type.
/// @return The constant type.
static const Symbol getConstType(const Symbol& symbol);

/// @brief Retrieves whether the symbol is a constructor.
/// @param symbol The symbol of which to get the constructor status.
/// @return True if the symbol is a constructor, otherwise false.
static const BOOL getConstructor(const Symbol& symbol);

/// @brief Retrieves the container of the symbol.
/// @param symbol The symbol of which to get the container.
/// @return The container.
static const Symbol getContainer(const Symbol& symbol);

/// @brief Retrieves the count of the symbol.
/// @param symbol The symbol of which to get the count.
/// @return The count.
static const DWORD getCount(const Symbol& symbol);

/// @brief Retrieves the count of live ranges of the symbol.
/// @param symbol The symbol of which to get the count of live ranges.
/// @return The count of live ranges.
static const DWORD getCountLiveRanges(const Symbol& symbol);

/// @brief Retrieves the custom calling convention of the symbol.
/// @param symbol The symbol of which to get the custom calling convention.
/// @return The custom calling convention.
static const DWORD getCustomCallingConvention(const Symbol& symbol);
/// @brief Retrieves the data bytes of the symbol.
/// @param symbol The symbol of which to get the data bytes.
/// @return The data bytes.
static const DataBytes getDataBytes(const Symbol& symbol);

/// @brief Retrieves whether Edit and Continue is enabled for the symbol.
/// @param symbol The symbol of which to get the Edit and Continue status.
/// @return True if Edit and Continue is enabled, otherwise false.
static const BOOL getEditAndContinueEnabled(const Symbol& symbol);

/// @brief Retrieves whether the symbol has a far return.
/// @param symbol The symbol of which to get the far return status.
/// @return True if the symbol has a far return, otherwise false.
static const BOOL getFarReturn(const Symbol& symbol);

/// @brief Retrieves whether the symbol has a frame pointer present.
/// @param symbol The symbol of which to get the frame pointer present status.
/// @return True if the symbol has a frame pointer present, otherwise false.
static const BOOL getFramePointerPresent(const Symbol& symbol);

/// @brief Retrieves the front end build number of the compiler.
/// @param symbol The symbol of which to get the front end build number.
/// @return The front end build number.
static const DWORD getFrontEndBuild(const Symbol& symbol);

/// @brief Retrieves the front end major version number of the compiler.
/// @param symbol The symbol of which to get the front end major version number.
/// @return The front end major version number.
static const DWORD getFrontEndMajor(const Symbol& symbol);

/// @brief Retrieves the front end minor version number of the compiler.
/// @param symbol The symbol of which to get the front end minor version number.
/// @return The front end minor version number.
static const DWORD getFrontEndMinor(const Symbol& symbol);

/// @brief Retrieves the front end QFE number of the compiler.
/// @param symbol The symbol of which to get the front end QFE number.
/// @return The front end QFE number.
static const DWORD getFrontEndQFE(const Symbol& symbol);

/// @brief Retrieves the GUID of the symbol.
/// @param symbol The symbol of which to get the GUID.
/// @return The GUID.
static const GUID getGuid(const Symbol& symbol);

/// @brief Retrieves whether the symbol has an alloca.
/// @param symbol The symbol of which to get the alloca status.
/// @return True if the symbol has an alloca, otherwise false.
static const BOOL getHasAlloca(const Symbol& symbol);

/// @brief Retrieves whether the symbol has an assignment operator.
/// @param symbol The symbol of which to get the assignment operator status.
/// @return True if the symbol has an assignment operator, otherwise false.
static const BOOL getHasAssignmentOperator(const Symbol& symbol);

/// @brief Retrieves whether the symbol has a cast operator.
/// @param symbol The symbol of which to get the cast operator status.
/// @return True if the symbol has a cast operator, otherwise false.
static const BOOL getHasCastOperator(const Symbol& symbol);

/// @brief Retrieves whether the symbol has debug information.
/// @param symbol The symbol of which to get the debug information status.
/// @return True if the symbol has debug information, otherwise false.
static const BOOL getHasDebugInfo(const Symbol& symbol);

/// @brief Retrieves whether the symbol has exception handling.
/// @param symbol The symbol of which to get the exception handling status.
/// @return True if the symbol has exception handling, otherwise false.
static const BOOL getHasEH(const Symbol& symbol);

/// @brief Retrieves whether the symbol has asynchronous exception handling.
/// @param symbol The symbol of which to get the asynchronous exception handling
/// status.
/// @return True if the symbol has asynchronous exception handling, otherwise
/// false.
static const BOOL getHasEHa(const Symbol& symbol);

/// @brief Retrieves whether the symbol has inline assembly.
/// @param symbol The symbol of which to get the inline assembly status.
/// @return True if the symbol has inline assembly, otherwise false.
static const BOOL getHasInlAsm(const Symbol& symbol);

/// @brief Retrieves whether the symbol has a long jump.
/// @param symbol The symbol of which to get the long jump status.
/// @return True if the symbol has a long jump, otherwise false.
static const BOOL getHasLongJump(const Symbol& symbol);

/// @brief Retrieves whether the symbol has managed code.
/// @param symbol The symbol of which to get the managed code status.
/// @return True if the symbol has managed code, otherwise false.
static const BOOL getHasManagedCode(const Symbol& symbol);

/// @brief Retrieves whether the symbol has nested types.
/// @param symbol The symbol of which to get the nested types status.
/// @return True if the symbol has nested types, otherwise false.
static const BOOL getHasNestedTypes(const Symbol& symbol);

/// @brief Retrieves whether the symbol has structured exception handling.
/// @param symbol The symbol of which to get the structured exception handling
/// status.
/// @return True if the symbol has structured exception handling, otherwise
/// false.
static const BOOL getHasSEH(const Symbol& symbol);

/// @brief Retrieves whether the symbol has security checks.
/// @param symbol The symbol of which to get the security checks status.
/// @return True if the symbol has security checks, otherwise false.
static const BOOL getHasSecurityChecks(const Symbol& symbol);

/// @brief Retrieves whether the symbol has a set jump.
/// @param symbol The symbol of which to get the set jump status.
/// @return True if the symbol has a set jump, otherwise false.
static const BOOL getHasSetJump(const Symbol& symbol);

/// @brief Retrieves whether the symbol has a double HFA.
/// @param symbol The symbol of which to get the double HFA status.
/// @return True if the symbol has a double HFA, otherwise false.
static const BOOL getHfaDouble(const Symbol& symbol);

/// @brief Retrieves whether the symbol has a float HFA.
/// @param symbol The symbol of which to get the float HFA status.
/// @return True if the symbol has a float HFA, otherwise false.
static const BOOL getHfaFloat(const Symbol& symbol);

/// @brief Retrieves whether the symbol is an indirect virtual base class.
/// @param symbol The symbol of which to get the indirect virtual base class
/// status.
/// @return True if the symbol is an indirect virtual base class, otherwise
/// false.
static const BOOL getIndirectVirtualBaseClass(const Symbol& symbol);

/// @brief Retrieves the inline specification of the symbol.
/// @param symbol The symbol of which to get the inline specification.
/// @return The inline specification.
static const DWORD getInlSpec(const Symbol& symbol);

/// @brief Retrieves whether the symbol has an interrupt return.
/// @param symbol The symbol of which to get the interrupt return status.
/// @return True if the symbol has an interrupt return, otherwise false.
static const BOOL getInterruptReturn(const Symbol& symbol);

/// @brief Retrieves whether the symbol is intrinsic.
/// @param symbol The symbol of which to get the intrinsic status.
/// @return True if the symbol is intrinsic, otherwise false.
static const BOOL getIntrinsic(const Symbol& symbol);

/// @brief Retrieves the introduction of the symbol.
/// @param symbol The symbol of which to get the introduction.
/// @return The introduction.
static const DWORD getIntro(const Symbol& symbol);

/// @brief Retrieves whether the symbol is an accelerator group shared local.
/// @param symbol The symbol of which to get the accelerator group shared local
/// status.
/// @return True if the symbol is an accelerator group shared local, otherwise
/// false.
static const BOOL getIsAcceleratorGroupSharedLocal(const Symbol& symbol);

/// @brief Retrieves whether the symbol is an accelerator pointer tag live
/// range.
/// @param symbol The symbol of which to get the accelerator pointer tag live
/// range status.
/// @return True if the symbol is an accelerator pointer tag live range,
/// otherwise false.
static const BOOL getIsAcceleratorPointerTagLiveRange(const Symbol& symbol);

/// @brief Retrieves whether the symbol is an accelerator stub function.
/// @param symbol The symbol of which to get the accelerator stub function
/// status.
/// @return True if the symbol is an accelerator stub function, otherwise false.
static const BOOL getIsAcceleratorStubFunction(const Symbol& symbol);

/// @brief Retrieves whether the symbol is aggregated.
/// @param symbol The symbol of which to get the aggregated status.
/// @return True if the symbol is aggregated, otherwise false.
static const BOOL getIsAggregated(const Symbol& symbol);
/// @brief Retrieves whether the symbol file contains C types.
/// @param symbol The symbol of which to get the C types status.
/// @return True if the symbol file contains C types, otherwise false.
static const BOOL getIsCTypes(const Symbol& symbol);

/// @brief Retrieves whether the module was converted from a Common Intermediate
/// Language (CIL) module to a native module.
/// @param symbol The symbol of which to get the CVTCIL status.
/// @return True if the module was converted from CIL to native code, otherwise
/// false.
static const BOOL getIsCVTCIL(const Symbol& symbol);

/// @brief Retrieves whether this is an instance constructor of a class with a
/// virtual base.
/// @param symbol The symbol of which to get the constructor virtual base
/// status.
/// @return True if this is an instance constructor of a class with a virtual
/// base, otherwise false.
static const BOOL getIsConstructorVirtualBase(const Symbol& symbol);

/// @brief Retrieves whether the function's return parameter uses C++ semantics
/// for UDT.
/// @param symbol The symbol of which to get the C++ return UDT status.
/// @return True if the function's return parameter uses C++ semantics for UDT,
/// otherwise false.
static const BOOL getIsCxxReturnUdt(const Symbol& symbol);

/// @brief Retrieves whether the user-defined type (UDT) has been aligned to a
/// specific memory boundary.
/// @param symbol The symbol of which to get the data alignment status.
/// @return True if the UDT has been aligned to a specific memory boundary,
/// otherwise false.
static const BOOL getIsDataAligned(const Symbol& symbol);

/// @brief Retrieves whether the symbol is HLSL data.
/// @param symbol The symbol of which to get the HLSL data status.
/// @return True if the symbol is HLSL data, otherwise false.
static const BOOL getIsHLSLData(const Symbol& symbol);

/// @brief Retrieves whether the symbol is hotpatchable.
/// @param symbol The symbol of which to get the hotpatchable status.
/// @return True if the symbol is hotpatchable, otherwise false.
static const BOOL getIsHotpatchable(const Symbol& symbol);

/// @brief Retrieves whether the symbol is an interface UDT.
/// @param symbol The symbol of which to get the interface UDT status.
/// @return True if the symbol is an interface UDT, otherwise false.
static const BOOL getIsInterfaceUdt(const Symbol& symbol);

/// @brief Retrieves whether the symbol is LTCG.
/// @param symbol The symbol of which to get the LTCG status.
/// @return True if the symbol is LTCG, otherwise false.
static const BOOL getIsLTCG(const Symbol& symbol);

/// @brief Retrieves whether the symbol's location is control flow dependent.
/// @param symbol The symbol of which to get the location control flow dependent
/// status.
/// @return True if the symbol's location is control flow dependent, otherwise
/// false.
static const BOOL getIsLocationControlFlowDependent(const Symbol& symbol);

/// @brief Retrieves whether the symbol is an MSIL netmodule.
/// @param symbol The symbol of which to get the MSIL netmodule status.
/// @return True if the symbol is an MSIL netmodule, otherwise false.
static const BOOL getIsMSILNetmodule(const Symbol& symbol);

/// @brief Retrieves whether the symbol is a matrix row major.
/// @param symbol The symbol of which to get the matrix row major status.
/// @return True if the symbol is a matrix row major, otherwise false.
static const BOOL getIsMatrixRowMajor(const Symbol& symbol);

/// @brief Retrieves whether the symbol has multiple inheritance.
/// @param symbol The symbol of which to get the multiple inheritance status.
/// @return True if the symbol has multiple inheritance, otherwise false.
static const BOOL getIsMultipleInheritance(const Symbol& symbol);

/// @brief Retrieves whether the symbol is naked.
/// @param symbol The symbol of which to get the naked status.
/// @return True if the symbol is naked, otherwise false.
static const BOOL getIsNaked(const Symbol& symbol);

/// @brief Retrieves whether the symbol is optimized away.
/// @param symbol The symbol of which to get the optimized away status.
/// @return True if the symbol is optimized away, otherwise false.
static const BOOL getIsOptimizedAway(const Symbol& symbol);

/// @brief Retrieves whether the symbol is pointer based on symbol value.
/// @param symbol The symbol of which to get the pointer based on symbol value
/// status.
/// @return True if the symbol is pointer based on symbol value, otherwise
/// false.
static const BOOL getIsPointerBasedOnSymbolValue(const Symbol& symbol);

/// @brief Retrieves whether the symbol is a pointer to a data member.
/// @param symbol The symbol of which to get the pointer to data member status.
/// @return True if the symbol is a pointer to a data member, otherwise false.
static const BOOL getIsPointerToDataMember(const Symbol& symbol);

/// @brief Retrieves whether the symbol is a pointer to a member function.
/// @param symbol The symbol of which to get the pointer to member function
/// status.
/// @return True if the symbol is a pointer to a member function, otherwise
/// false.
static const BOOL getIsPointerToMemberFunction(const Symbol& symbol);

/// @brief Retrieves whether the symbol is a reference UDT.
/// @param symbol The symbol of which to get the reference UDT status.
/// @return True if the symbol is a reference UDT, otherwise false.
static const BOOL getIsRefUdt(const Symbol& symbol);

/// @brief Retrieves whether the symbol is a return value.
/// @param symbol The symbol of which to get the return value status.
/// @return True if the symbol is a return value, otherwise false.
static const BOOL getIsReturnValue(const Symbol& symbol);

/// @brief Retrieves whether the symbol has safe buffers.
/// @param symbol The symbol of which to get the safe buffers status.
/// @return True if the symbol has safe buffers, otherwise false.
static const BOOL getIsSafeBuffers(const Symbol& symbol);

/// @brief Retrieves whether the symbol is SDL.
/// @param symbol The symbol of which to get the SDL status.
/// @return True if the symbol is SDL, otherwise false.
static const BOOL getIsSdl(const Symbol& symbol);

/// @brief Retrieves whether the symbol has single inheritance.
/// @param symbol The symbol of which to get the single inheritance status.
/// @return True if the symbol has single inheritance, otherwise false.
static const BOOL getIsSingleInheritance(const Symbol& symbol);

/// @brief Retrieves whether the symbol is split.
/// @param symbol The symbol of which to get the split status.
/// @return True if the symbol is split, otherwise false.
static const BOOL getIsSplitted(const Symbol& symbol);

/// @brief Retrieves whether the symbol is static.
/// @param symbol The symbol of which to get the static status.
/// @return True if the symbol is static, otherwise false.
static const BOOL getIsStatic(const Symbol& symbol);

/// @brief Retrieves whether the symbol is stripped.
/// @param symbol The symbol of which to get the stripped status.
/// @return True if the symbol is stripped, otherwise false.
static const BOOL getIsStripped(const Symbol& symbol);

/// @brief Retrieves whether the symbol is a value UDT.
/// @param symbol The symbol of which to get the value UDT status.
/// @return True if the symbol is a value UDT, otherwise false.
static const BOOL getIsValueUdt(const Symbol& symbol);

/// @brief Retrieves whether the symbol has virtual inheritance.
/// @param symbol The symbol of which to get the virtual inheritance status.
/// @return True if the symbol has virtual inheritance, otherwise false.
static const BOOL getIsVirtualInheritance(const Symbol& symbol);

/// @brief Retrieves whether the symbol is a WinRT pointer.
/// @param symbol The symbol of which to get the WinRT pointer status.
/// @return True if the symbol is a WinRT pointer, otherwise false.
static const BOOL getIsWinRTPointer(const Symbol& symbol);

/// @brief Retrieves the language of the symbol.
/// @param symbol The symbol of which to get the language.
/// @return The language.
static const DWORD getLanguage(const Symbol& symbol);

/// @brief Retrieves the lexical parent ID of the symbol.
/// @param symbol The symbol of which to get the lexical parent ID.
/// @return The lexical parent ID.
static const DWORD getLexicalParentId(const Symbol& symbol);

/// @brief Retrieves the library name of the symbol.
/// @param symbol The symbol of which to get the library name.
/// @return The library name.
static const BstrWrapper getLibraryName(const Symbol& symbol);

/// @brief Retrieves the live range length of the symbol.
/// @param symbol The symbol of which to get the live range length.
/// @return The live range length.
static const ULONGLONG getLiveRangeLength(const Symbol& symbol);
/// @brief Retrieves the start address offset of the live range.
/// @param symbol The symbol of which to get the live range start address
/// offset.
/// @return The start address offset of the live range.
static const uint32_t getLiveRangeStartAddressOffset(const Symbol& symbol);

/// @brief Retrieves the start address section of the live range.
/// @param symbol The symbol of which to get the live range start address
/// section.
/// @return The start address section of the live range.
static const uint16_t getLiveRangeStartAddressSection(const Symbol& symbol);

/// @brief Retrieves the start relative virtual address of the live range.
/// @param symbol The symbol of which to get the live range start relative
/// virtual address.
/// @return The start relative virtual address of the live range.
static const uint32_t
getLiveRangeStartRelativeVirtualAddress(const Symbol& symbol);

/// @brief Retrieves the local base pointer register ID.
/// @param symbol The symbol of which to get the local base pointer register ID.
/// @return The local base pointer register ID.
static const uint32_t getLocalBasePointerRegisterId(const Symbol& symbol);

/// @brief Retrieves the machine type.
/// @param symbol The symbol of which to get the machine type.
/// @return The machine type.
static const uint16_t getMachineType(const Symbol& symbol);

/// @brief Retrieves the memory space kind.
/// @param symbol The symbol of which to get the memory space kind.
/// @return The memory space kind.
static const uint32_t getMemorySpaceKind(const Symbol& symbol);

/// @brief Retrieves the modifier values.
/// @param symbol The symbol of which to get the modifier values.
/// @return The modifier values.
static const std::vector<uint32_t> getModifierValues(const Symbol& symbol);

/// @brief Checks if the symbol is nested.
/// @param symbol The symbol to check for nesting.
/// @return True if the symbol is nested, otherwise false.
static const bool getNested(const Symbol& symbol);
/// @brief Retrieves whether the symbol has the no-inline attribute.
/// @param symbol The symbol to check.
/// @return True if the symbol has the no-inline attribute, otherwise false.
static const bool getNoInline(const Symbol& symbol);

/// @brief Retrieves whether the symbol has the no-return attribute.
/// @param symbol The symbol to check.
/// @return True if the symbol has the no-return attribute, otherwise false.
static const bool getNoReturn(const Symbol& symbol);

/// @brief Retrieves whether the symbol has the no-stack-ordering attribute.
/// @param symbol The symbol to check.
/// @return True if the symbol has the no-stack-ordering attribute, otherwise
/// false.
static const bool getNoStackOrdering(const Symbol& symbol);

/// @brief Retrieves whether the symbol has the not-reached attribute.
/// @param symbol The symbol to check.
/// @return True if the symbol has the not-reached attribute, otherwise false.
static const bool getNotReached(const Symbol& symbol);

/// @brief Retrieves the number of accelerator pointer tags.
/// @param symbol The symbol to check.
/// @return The number of accelerator pointer tags.
static const ULONG getNumberOfAcceleratorPointerTags(const Symbol& symbol);

/// @brief Retrieves the number of columns.
/// @param symbol The symbol to check.
/// @return The number of columns.
static const ULONG getNumberOfColumns(const Symbol& symbol);

/// @brief Retrieves the number of modifiers.
/// @param symbol The symbol to check.
/// @return The number of modifiers.
static const ULONG getNumberOfModifiers(const Symbol& symbol);

/// @brief Retrieves the number of register indices.
/// @param symbol The symbol to check.
/// @return The number of register indices.
static const ULONG getNumberOfRegisterIndices(const Symbol& symbol);

/// @brief Retrieves the number of rows.
/// @param symbol The symbol to check.
/// @return The number of rows.
static const ULONG getNumberOfRows(const Symbol& symbol);

/// @brief Retrieves the numeric properties.
/// @param symbol The symbol to check.
/// @return The numeric properties.
static const std::vector<ULONG> getNumericProperties(const Symbol& symbol);

/// @brief Retrieves the object file name.
/// @param symbol The symbol to check.
/// @return The object file name.
static const BSTR getObjectFileName(const Symbol& symbol);

/// @brief Retrieves the object pointer type.
/// @param symbol The symbol to check.
/// @return The object pointer type.
static const ULONG getObjectPointerType(const Symbol& symbol);

/// @brief Retrieves the OEM ID.
/// @param symbol The symbol to check.
/// @return The OEM ID.
static const ULONG getOemId(const Symbol& symbol);

/// @brief Retrieves the OEM symbol ID.
/// @param symbol The symbol to check.
/// @return The OEM symbol ID.
static const ULONG getOemSymbolId(const Symbol& symbol);

/// @brief Retrieves the offset in UDT.
/// @param symbol The symbol to check.
/// @return The offset in UDT.
static const ULONG getOffsetInUdt(const Symbol& symbol);

/// @brief Retrieves whether the symbol has optimized code debug info.
/// @param symbol The symbol to check.
/// @return True if the symbol has optimized code debug info, otherwise false.
static const bool getOptimizedCodeDebugInfo(const Symbol& symbol);

/// @brief Retrieves whether the symbol is an overloaded operator.
/// @param symbol The symbol to check.
/// @return True if the symbol is an overloaded operator, otherwise false.
static const bool getOverloadedOperator(const Symbol& symbol);

/// @brief Retrieves whether the symbol is packed.
/// @param symbol The symbol to check.
/// @return True if the symbol is packed, otherwise false.
static const bool getPacked(const Symbol& symbol);

/// @brief Retrieves the parameter base pointer register ID.
/// @param symbol The symbol to check.
/// @return The parameter base pointer register ID.
static const ULONG getParamBasePointerRegisterId(const Symbol& symbol);

/// @brief Retrieves the platform.
/// @param symbol The symbol to check.
/// @return The platform.
static const ULONG getPlatform(const Symbol& symbol);

/// @brief Retrieves whether the symbol is pure.
/// @param symbol The symbol to check.
/// @return True if the symbol is pure, otherwise false.
static const bool getPure(const Symbol& symbol);

/// @brief Retrieves the reference.
/// @param symbol The symbol to check.
/// @return The reference.
static const ULONG getReference(const Symbol& symbol);

/// @brief Retrieves the register type.
/// @param symbol The symbol to check.
/// @return The register type.
static const ULONG getRegisterType(const Symbol& symbol);

/// @brief Retrieves whether the symbol is a restricted type.
/// @param symbol The symbol to check.
/// @return True if the symbol is a restricted type, otherwise false.
static const bool getRestrictedType(const Symbol& symbol);

/// @brief Retrieves the sampler slot.
/// @param symbol The symbol to check.
/// @return The sampler slot.
static const ULONG getSamplerSlot(const Symbol& symbol);

/// @brief Retrieves whether the symbol is scoped.
/// @param symbol The symbol to check.
/// @return True if the symbol is scoped, otherwise false.
static const bool getScoped(const Symbol& symbol);

/// @brief Retrieves whether the symbol is sealed.
/// @param symbol The symbol to check.
/// @return True if the symbol is sealed, otherwise false.
static const bool getSealed(const Symbol& symbol);

/// @brief Retrieves the size in UDT.
/// @param symbol The symbol to check.
/// @return The size in UDT.
static const ULONG getSizeInUdt(const Symbol& symbol);

/// @brief Retrieves the slot.
/// @param symbol The symbol to check.
/// @return The slot.
static const ULONG getSlot(const Symbol& symbol);
/// @brief Retrieves the source file name.
/// @param symbol The symbol to check.
/// @return The source file name.
static const BSTR getSourceFileName(const Symbol& symbol);

/// @brief Retrieves whether the symbol has strict GS check.
/// @param symbol The symbol to check.
/// @return True if the symbol has strict GS check, otherwise false.
static const bool getStrictGSCheck(const Symbol& symbol);

/// @brief Retrieves the stride.
/// @param symbol The symbol to check.
/// @return The stride.
static const ULONG getStride(const Symbol& symbol);

/// @brief Retrieves the sub-type.
/// @param symbol The symbol to check.
/// @return The sub-type.
static const ULONG getSubType(const Symbol& symbol);

/// @brief Retrieves the sub-type ID.
/// @param symbol The symbol to check.
/// @return The sub-type ID.
static const ULONG getSubTypeId(const Symbol& symbol);

/// @brief Retrieves the symbols file name.
/// @param symbol The symbol to check.
/// @return The symbols file name.
static const BSTR getSymbolsFileName(const Symbol& symbol);

/// @brief Retrieves the target offset.
/// @param symbol The symbol to check.
/// @return The target offset.
static const ULONG getTargetOffset(const Symbol& symbol);

/// @brief Retrieves the target relative virtual address.
/// @param symbol The symbol to check.
/// @return The target relative virtual address.
static const ULONG getTargetRelativeVirtualAddress(const Symbol& symbol);

/// @brief Retrieves the target section.
/// @param symbol The symbol to check.
/// @return The target section.
static const USHORT getTargetSection(const Symbol& symbol);

/// @brief Retrieves the target virtual address.
/// @param symbol The symbol to check.
/// @return The target virtual address.
static const ULONGLONG getTargetVirtualAddress(const Symbol& symbol);

/// @brief Retrieves the texture slot.
/// @param symbol The symbol to check.
/// @return The texture slot.
static const ULONG getTextureSlot(const Symbol& symbol);

/// @brief Retrieves the this adjust.
/// @param symbol The symbol to check.
/// @return The this adjust.
static const LONG getThisAdjust(const Symbol& symbol);

/// @brief Retrieves the thunk ordinal.
/// @param symbol The symbol to check.
/// @return The thunk ordinal.
static const ULONG getThunkOrdinal(const Symbol& symbol);

/// @brief Retrieves the time stamp.
/// @param symbol The symbol to check.
/// @return The time stamp.
static const ULONG getTimeStamp(const Symbol& symbol);

/// @brief Retrieves the token.
/// @param symbol The symbol to check.
/// @return The token.
static const ULONG getToken(const Symbol& symbol);

/// @brief Retrieves the type IDs.
/// @param symbol The symbol to check.
/// @return The type IDs.
static const std::vector<ULONG> getTypeIds(const Symbol& symbol);

/// @brief Retrieves the types.
/// @param symbol The symbol to check.
/// @return The types.
static const std::vector<ULONG> getTypes(const Symbol& symbol);

/// @brief Retrieves the UAV slot.
/// @param symbol The symbol to check.
/// @return The UAV slot.
static const ULONG getUavSlot(const Symbol& symbol);

/// @brief Retrieves the UDT kind.
/// @param symbol The symbol to check.
/// @return The UDT kind.
static const ULONG getUdtKind(const Symbol& symbol);

/// @brief Retrieves whether the symbol is an unaligned type.
/// @param symbol The symbol to check.
/// @return True if the symbol is an unaligned type, otherwise false.
static const bool getUnalignedType(const Symbol& symbol);

/// @brief Retrieves the undecorated name.
/// @param symbol The symbol to check.
/// @return The undecorated name.
static const BSTR getUndecoratedNameEx(const Symbol& symbol);

/// @brief Retrieves the unmodified type.
/// @param symbol The symbol to check.
/// @return The unmodified type.
static const ULONG getUnmodifiedType(const Symbol& symbol);

/// @brief Retrieves the unmodified type ID.
/// @param symbol The symbol to check.
/// @return The unmodified type ID.
static const ULONG getUnmodifiedTypeId(const Symbol& symbol);

/// @brief Retrieves whether the symbol is unused.
/// @param symbol The symbol to check.
/// @return True if the symbol is unused, otherwise false.
static const bool getUnused(const Symbol& symbol);

/// @brief Retrieves the value.
/// @param symbol The symbol to check.
/// @return The value.
static const VARIANT getValue(const Symbol& symbol);

/// @brief Retrieves whether the symbol is a virtual base class.
/// @param symbol The symbol to check.
/// @return True if the symbol is a virtual base class, otherwise false.
static const bool getVirtualBaseClass(const Symbol& symbol);

/// @brief Retrieves the virtual base offset.
/// @param symbol The symbol to check.
/// @return The virtual base offset.
static const LONG getVirtualBaseOffset(const Symbol& symbol);

/// @brief Retrieves the virtual base pointer offset.
/// @param symbol The symbol to check.
/// @return The virtual base pointer offset.
static const LONG getVirtualBasePointerOffset(const Symbol& symbol);

/// @brief Retrieves the virtual base table type.
/// @param symbol The symbol to check.
/// @return The virtual base table type.
static const ULONG getVirtualBaseTableType(const Symbol& symbol);

/// @brief Retrieves whether the symbol is a volatile type.
/// @param symbol The symbol to check.
/// @return True if the symbol is a volatile type, otherwise false.
static const bool getVolatileType(const Symbol& symbol);

/// @brief Retrieves whether the symbol was inlined.
/// @param symbol The symbol to check.
/// @return True if the symbol was inlined, otherwise false.
static const bool getWasInlined(const Symbol& symbol);
