// Hint files help the Visual Studio IDE interpret Visual C++ identifiers
// such as names of functions and macros.
// For more information see https://go.microsoft.com/fwlink/?linkid=865984
#define TRIVIAL_CONVERT(fromType, toType) toType(const fromType& other) : fromType{other} {}; toType operator=(const fromType& other) { return toType{other}; } toType(fromType&& other) noexcept : fromType{other} {}; toType operator=(fromType&& other) noexcept { return toType{::std::move(other)}; }
#define FALSE
#define TEST_METHOD(methodName) static const EXPORT_METHOD ::Microsoft::VisualStudio::CppUnitTestFramework::MemberMethodInfo* CALLING_CONVENTION CATNAME(__GetTestMethodInfo_, methodName)() { __GetTestClassInfo(); __GetTestVersion(); ALLOCATE_TESTDATA_SECTION_METHOD static const ::Microsoft::VisualStudio::CppUnitTestFramework::MethodMetadata s_Metadata = {L"TestMethodInfo", L###methodName, reinterpret_cast<const unsigned char*>(__FUNCTION__), reinterpret_cast<const unsigned char*>(__FUNCDNAME__), __WFILE__, __LINE__}; static ::Microsoft::VisualStudio::CppUnitTestFramework::MemberMethodInfo s_Info = {::Microsoft::VisualStudio::CppUnitTestFramework::MemberMethodInfo::TestMethod, {NULL}, &s_Metadata}; s_Info.method.pVoidMethod = static_cast<::Microsoft::VisualStudio::CppUnitTestFramework::TestClassImpl::__voidFunc>(&ThisClass::methodName); return &s_Info; } void methodName()
#define TEST_CLASS(className)
